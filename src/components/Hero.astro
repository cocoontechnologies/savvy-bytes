---
import Button from "./Button.astro";
---

<canvas
  id="dust"
  class="w-full h-screen absolute inset-0 pointer-events-none mix-blend-screen"
></canvas>

<canvas
  id="rays"
  class="w-full h-screen absolute bg-gradient-to-bl from-white/20 from-0% to-transparent to-35% pointer-events-none blur-md overflow-hidden scale-110"
></canvas>

<div
  id="home"
  class="flex flex-col items-center justify-center min-h-[80vh] gap-12 relative pt-28"
>
  <div
    class="flex flex-col font-lexend font-bold text-6xl items-center text-center"
  >
    <h2 class="mix-blend-color-dodge text-gray-300">The motive to make your</h2>
    <h2 class="text-tertiary">Business</h2>
  </div>

  <p class="text-base text-secondary/50 w-full px-5 lg:w-[448px] lg:px-0 self-center text-center">
    We build websites, web apps, mobile apps, and software solutions to help
    your business grow.
  </p>

  <a href="#contact-us">
    <Button>Get started today</Button>
  </a>
</div>

<script>
  type Ray = {
    x: number;
    y: number;
    isFading: boolean;
    opacity: number;
    lineWidth: number;
    threshold: number;
  };

  type Dust = {
    x: number;
    y: number;
    speed: number;
    radius: number;
  };

  const raysCanvas = document.querySelector("#rays") as HTMLCanvasElement,
    raysCtx = raysCanvas.getContext("2d"),
    raysCounter = 32,
    step = 0.005,
    rays: Array<Ray> = [];

  const dustCanvas = document.querySelector("#dust") as HTMLCanvasElement,
    dustCtx = dustCanvas.getContext("2d"),
    dustsCounter = 128,
    dusts: Array<Dust> = [];

  const source = {
    x: window.innerWidth,
    y: -(window.innerHeight * 0.75),
  };

  function setCanvasDimensions(canvas: HTMLCanvasElement) {
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
  }

  /** Helper functions */
  function getRandomInt(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  /* =================== Ray methods =================== */
  function createRay() {
    const x = Math.floor(getRandomInt(-1920, 1080) * Math.random()),
      y = Math.floor(1920 * Math.random() + 512),
      width = Math.floor(Math.random() * 256);

    rays.push({
      x,
      y,
      isFading: false,
      opacity: 0,
      lineWidth: width,
      threshold: Math.random() * 0.5,
    });
  }

  function updateRay(ray: Ray) {
    if (ray.opacity > ray.threshold) ray.isFading = true;

    if (ray.opacity < 0 && ray.isFading) ray.isFading = false;

    if (ray.isFading) {
      ray.opacity -= step;
    } else {
      ray.opacity += step;
    }
  }

  function drawRay(ray: Ray) {
    raysCtx.beginPath();
    raysCtx.moveTo(source.x, source.y);
    raysCtx.lineTo(source.x, source.y);
    raysCtx.lineTo(ray.x, ray.y);

    const gradient = raysCtx.createLinearGradient(
      source.x,
      source.y,
      ray.x,
      ray.y
    );
    gradient.addColorStop(0, `rgba(255, 255, 255, ${ray.opacity})`);
    gradient.addColorStop(0.5, "transparent");

    raysCtx.lineWidth = ray.lineWidth;
    raysCtx.strokeStyle = gradient;
    raysCtx.stroke();
  }
  /* =================== Ray methods =================== */

  /* =================== Dust methods =================== */
  function createDust() {
    const x = Math.floor(
        dustCanvas.width * 0.1 +
          Math.random() * (dustCanvas.width - dustCanvas.width * 0.2)
      ),
      y = Math.floor(0);

    dusts.push({
      x,
      y,
      radius: parseFloat(Math.random().toFixed(2)) + 0.5,
      speed: Math.random() * .5,
    });
  }

  function updateDust(dust: Dust) {
    if (dust.y > dustCanvas.height) {
      dust.y = 0;
    } else {
      dust.y += dust.speed;
    }
  }

  function drawDust(dust: Dust) {
    dustCtx.beginPath();
    dustCtx.arc(dust.x, dust.y, dust.radius, 0, Math.PI * 2);
    dustCtx.closePath();
    dustCtx.fillStyle = `rgba(64, 64, 64, 0.5)`;
    dustCtx.fill();
  }
  /* =================== Dust methods =================== */

  function animate() {
    raysCtx.clearRect(0, 0, window.innerWidth, window.innerHeight);
    dustCtx.clearRect(0, 0, window.innerWidth, window.innerHeight);

    rays.forEach((ray) => {
      updateRay(ray);
      drawRay(ray);
    });

    dusts.forEach((dust) => {
      updateDust(dust);
      drawDust(dust);
    });

    requestAnimationFrame(animate);
  }

  /** Initializers */
  window.addEventListener("resize", () => {
    source.x = window.innerWidth;

    [raysCanvas, dustCanvas].forEach((canvas) => {
      setCanvasDimensions(canvas);
    });
  });

  [raysCanvas, dustCanvas].forEach((canvas) => {
    setCanvasDimensions(canvas);
  });

  while (rays.length < raysCounter) createRay();
  while (dusts.length < dustsCounter) createDust();

  animate();
</script>
